{"ast":null,"code":"import JSBI from 'jsbi';\nimport invariant from 'tiny-invariant';\nimport { getAddress } from '@ethersproject/address';\nimport warning from 'tiny-warning';\nimport _Decimal from 'decimal.js-light';\nimport _Big from 'big.js';\nimport toFormat from 'toformat';\nvar ChainId;\n\n(function (ChainId) {\n  ChainId[ChainId[\"MAINNET\"] = 1] = \"MAINNET\";\n  ChainId[ChainId[\"ROPSTEN\"] = 3] = \"ROPSTEN\";\n  ChainId[ChainId[\"RINKEBY\"] = 4] = \"RINKEBY\";\n  ChainId[ChainId[\"G\\xD6RLI\"] = 5] = \"G\\xD6RLI\";\n  ChainId[ChainId[\"KOVAN\"] = 42] = \"KOVAN\";\n})(ChainId || (ChainId = {}));\n\nvar TradeType;\n\n(function (TradeType) {\n  TradeType[TradeType[\"EXACT_INPUT\"] = 0] = \"EXACT_INPUT\";\n  TradeType[TradeType[\"EXACT_OUTPUT\"] = 1] = \"EXACT_OUTPUT\";\n})(TradeType || (TradeType = {}));\n\nvar Rounding;\n\n(function (Rounding) {\n  Rounding[Rounding[\"ROUND_DOWN\"] = 0] = \"ROUND_DOWN\";\n  Rounding[Rounding[\"ROUND_HALF_UP\"] = 1] = \"ROUND_HALF_UP\";\n  Rounding[Rounding[\"ROUND_UP\"] = 2] = \"ROUND_UP\";\n})(Rounding || (Rounding = {}));\n\nvar MaxUint256 = /*#__PURE__*/JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction validateAndParseAddress(address) {\n  try {\n    var checksummedAddress = getAddress(address);\n    process.env.NODE_ENV !== \"production\" ? warning(address === checksummedAddress, address + \" is not checksummed.\") : void 0;\n    return checksummedAddress;\n  } catch (error) {\n    process.env.NODE_ENV !== \"production\" ? invariant(false, address + \" is not a valid address.\") : invariant(false);\n  }\n}\n/**\r\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\r\n *\r\n * The only instance of the base class `Currency` is Ether.\r\n */\n\n\nvar Currency =\n/**\r\n * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\r\n * @param decimals decimals of the currency\r\n * @param symbol symbol of the currency\r\n * @param name of the currency\r\n */\nfunction Currency(decimals, symbol, name) {\n  !(decimals < 255) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'DECIMALS') : invariant(false) : void 0;\n  this.decimals = decimals;\n  this.symbol = symbol;\n  this.name = name;\n};\n/**\r\n * The only instance of the base class `Currency`.\r\n */\n\n\nCurrency.ETHER = /*#__PURE__*/new Currency(18, 'ETH', 'Ether');\nvar ETHER = Currency.ETHER;\n\nvar _WETH;\n/**\r\n * Represents an ERC20 token with a unique address and some metadata.\r\n */\n\n\nvar Token = /*#__PURE__*/function (_Currency) {\n  _inheritsLoose(Token, _Currency);\n\n  function Token(chainId, address, decimals, symbol, name) {\n    var _this;\n\n    _this = _Currency.call(this, decimals, symbol, name) || this;\n    _this.chainId = chainId;\n    _this.address = validateAndParseAddress(address);\n    return _this;\n  }\n  /**\r\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\r\n   * @param other other token to compare\r\n   */\n\n\n  var _proto = Token.prototype;\n\n  _proto.equals = function equals(other) {\n    // short circuit on reference equality\n    if (this === other) {\n      return true;\n    }\n\n    return this.chainId === other.chainId && this.address === other.address;\n  }\n  /**\r\n   * Returns true if the address of this token sorts before the address of the other token\r\n   * @param other other token to compare\r\n   * @throws if the tokens have the same address\r\n   * @throws if the tokens are on different chains\r\n   */\n  ;\n\n  _proto.sortsBefore = function sortsBefore(other) {\n    !(this.chainId === other.chainId) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'CHAIN_IDS') : invariant(false) : void 0;\n    !(this.address !== other.address) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'ADDRESSES') : invariant(false) : void 0;\n    return this.address.toLowerCase() < other.address.toLowerCase();\n  };\n\n  return Token;\n}(Currency);\n/**\r\n * Compares two currencies for equality\r\n */\n\n\nfunction currencyEquals(currencyA, currencyB) {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB);\n  } else if (currencyA instanceof Token) {\n    return false;\n  } else if (currencyB instanceof Token) {\n    return false;\n  } else {\n    return currencyA === currencyB;\n  }\n}\n\nvar WETH9 = (_WETH = {}, _WETH[ChainId.MAINNET] = /*#__PURE__*/new Token(ChainId.MAINNET, '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', 18, 'WETH9', 'Wrapped Ether'), _WETH[ChainId.ROPSTEN] = /*#__PURE__*/new Token(ChainId.ROPSTEN, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH9', 'Wrapped Ether'), _WETH[ChainId.RINKEBY] = /*#__PURE__*/new Token(ChainId.RINKEBY, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH9', 'Wrapped Ether'), _WETH[ChainId.GÖRLI] = /*#__PURE__*/new Token(ChainId.GÖRLI, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH9', 'Wrapped Ether'), _WETH[ChainId.KOVAN] = /*#__PURE__*/new Token(ChainId.KOVAN, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH9', 'Wrapped Ether'), _WETH);\n\nvar _toSignificantRoundin, _toFixedRounding;\n\nvar Decimal = /*#__PURE__*/toFormat(_Decimal);\nvar Big = /*#__PURE__*/toFormat(_Big);\nvar toSignificantRounding = (_toSignificantRoundin = {}, _toSignificantRoundin[Rounding.ROUND_DOWN] = Decimal.ROUND_DOWN, _toSignificantRoundin[Rounding.ROUND_HALF_UP] = Decimal.ROUND_HALF_UP, _toSignificantRoundin[Rounding.ROUND_UP] = Decimal.ROUND_UP, _toSignificantRoundin);\nvar toFixedRounding = (_toFixedRounding = {}, _toFixedRounding[Rounding.ROUND_DOWN] = 0, _toFixedRounding[Rounding.ROUND_HALF_UP] = 1, _toFixedRounding[Rounding.ROUND_UP] = 3, _toFixedRounding);\n\nvar Fraction = /*#__PURE__*/function () {\n  function Fraction(numerator, denominator) {\n    if (denominator === void 0) {\n      denominator = JSBI.BigInt(1);\n    }\n\n    this.numerator = JSBI.BigInt(numerator);\n    this.denominator = JSBI.BigInt(denominator);\n  } // performs floor division\n\n\n  var _proto = Fraction.prototype;\n\n  _proto.invert = function invert() {\n    return new Fraction(this.denominator, this.numerator);\n  };\n\n  _proto.add = function add(other) {\n    var otherParsed = other instanceof Fraction ? other : new Fraction(JSBI.BigInt(other));\n\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator);\n    }\n\n    return new Fraction(JSBI.add(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator)), JSBI.multiply(this.denominator, otherParsed.denominator));\n  };\n\n  _proto.subtract = function subtract(other) {\n    var otherParsed = other instanceof Fraction ? other : new Fraction(JSBI.BigInt(other));\n\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator);\n    }\n\n    return new Fraction(JSBI.subtract(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator)), JSBI.multiply(this.denominator, otherParsed.denominator));\n  };\n\n  _proto.lessThan = function lessThan(other) {\n    var otherParsed = other instanceof Fraction ? other : new Fraction(JSBI.BigInt(other));\n    return JSBI.lessThan(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator));\n  };\n\n  _proto.equalTo = function equalTo(other) {\n    var otherParsed = other instanceof Fraction ? other : new Fraction(JSBI.BigInt(other));\n    return JSBI.equal(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator));\n  };\n\n  _proto.greaterThan = function greaterThan(other) {\n    var otherParsed = other instanceof Fraction ? other : new Fraction(JSBI.BigInt(other));\n    return JSBI.greaterThan(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator));\n  };\n\n  _proto.multiply = function multiply(other) {\n    var otherParsed = other instanceof Fraction ? other : new Fraction(JSBI.BigInt(other));\n    return new Fraction(JSBI.multiply(this.numerator, otherParsed.numerator), JSBI.multiply(this.denominator, otherParsed.denominator));\n  };\n\n  _proto.divide = function divide(other) {\n    var otherParsed = other instanceof Fraction ? other : new Fraction(JSBI.BigInt(other));\n    return new Fraction(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(this.denominator, otherParsed.numerator));\n  };\n\n  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {\n    if (format === void 0) {\n      format = {\n        groupSeparator: ''\n      };\n    }\n\n    if (rounding === void 0) {\n      rounding = Rounding.ROUND_HALF_UP;\n    }\n\n    !Number.isInteger(significantDigits) ? process.env.NODE_ENV !== \"production\" ? invariant(false, significantDigits + \" is not an integer.\") : invariant(false) : void 0;\n    !(significantDigits > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, significantDigits + \" is not positive.\") : invariant(false) : void 0;\n    Decimal.set({\n      precision: significantDigits + 1,\n      rounding: toSignificantRounding[rounding]\n    });\n    var quotient = new Decimal(this.numerator.toString()).div(this.denominator.toString()).toSignificantDigits(significantDigits);\n    return quotient.toFormat(quotient.decimalPlaces(), format);\n  };\n\n  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {\n    if (format === void 0) {\n      format = {\n        groupSeparator: ''\n      };\n    }\n\n    if (rounding === void 0) {\n      rounding = Rounding.ROUND_HALF_UP;\n    }\n\n    !Number.isInteger(decimalPlaces) ? process.env.NODE_ENV !== \"production\" ? invariant(false, decimalPlaces + \" is not an integer.\") : invariant(false) : void 0;\n    !(decimalPlaces >= 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, decimalPlaces + \" is negative.\") : invariant(false) : void 0;\n    Big.DP = decimalPlaces;\n    Big.RM = toFixedRounding[rounding];\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format);\n  };\n\n  _createClass(Fraction, [{\n    key: \"quotient\",\n    get: function get() {\n      return JSBI.divide(this.numerator, this.denominator);\n    } // remainder after floor division\n\n  }, {\n    key: \"remainder\",\n    get: function get() {\n      return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator);\n    }\n  }]);\n\n  return Fraction;\n}();\n\nvar _100_PERCENT = /*#__PURE__*/new Fraction( /*#__PURE__*/JSBI.BigInt(100));\n\nvar Percent = /*#__PURE__*/function (_Fraction) {\n  _inheritsLoose(Percent, _Fraction);\n\n  function Percent() {\n    return _Fraction.apply(this, arguments) || this;\n  }\n\n  var _proto = Percent.prototype;\n\n  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {\n    if (significantDigits === void 0) {\n      significantDigits = 5;\n    }\n\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding);\n  };\n\n  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {\n    if (decimalPlaces === void 0) {\n      decimalPlaces = 2;\n    }\n\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding);\n  };\n\n  return Percent;\n}(Fraction);\n\nvar Big$1 = /*#__PURE__*/toFormat(_Big);\n\nvar CurrencyAmount = /*#__PURE__*/function (_Fraction) {\n  _inheritsLoose(CurrencyAmount, _Fraction); // amount _must_ be raw, i.e. in the native representation\n\n\n  function CurrencyAmount(currency, amount) {\n    var _this;\n\n    var parsedAmount = JSBI.BigInt(amount);\n    !JSBI.lessThanOrEqual(parsedAmount, MaxUint256) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'AMOUNT') : invariant(false) : void 0;\n    _this = _Fraction.call(this, parsedAmount, JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))) || this;\n    _this.currency = currency;\n    return _this;\n  }\n  /**\r\n   * Helper that calls the constructor with the ETHER currency\r\n   * @param amount ether amount in wei\r\n   */\n\n\n  CurrencyAmount.ether = function ether(amount) {\n    return new CurrencyAmount(ETHER, amount);\n  };\n\n  var _proto = CurrencyAmount.prototype;\n\n  _proto.add = function add(other) {\n    !currencyEquals(this.currency, other.currency) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw));\n  };\n\n  _proto.subtract = function subtract(other) {\n    !currencyEquals(this.currency, other.currency) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw));\n  };\n\n  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {\n    if (significantDigits === void 0) {\n      significantDigits = 6;\n    }\n\n    if (rounding === void 0) {\n      rounding = Rounding.ROUND_DOWN;\n    }\n\n    return _Fraction.prototype.toSignificant.call(this, significantDigits, format, rounding);\n  };\n\n  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {\n    if (decimalPlaces === void 0) {\n      decimalPlaces = this.currency.decimals;\n    }\n\n    if (rounding === void 0) {\n      rounding = Rounding.ROUND_DOWN;\n    }\n\n    !(decimalPlaces <= this.currency.decimals) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'DECIMALS') : invariant(false) : void 0;\n    return _Fraction.prototype.toFixed.call(this, decimalPlaces, format, rounding);\n  };\n\n  _proto.toExact = function toExact(format) {\n    if (format === void 0) {\n      format = {\n        groupSeparator: ''\n      };\n    }\n\n    Big$1.DP = this.currency.decimals;\n    return new Big$1(this.numerator.toString()).div(this.denominator.toString()).toFormat(format);\n  };\n\n  _createClass(CurrencyAmount, [{\n    key: \"raw\",\n    get: function get() {\n      return this.numerator;\n    }\n  }]);\n\n  return CurrencyAmount;\n}(Fraction);\n\nvar TokenAmount = /*#__PURE__*/function (_CurrencyAmount) {\n  _inheritsLoose(TokenAmount, _CurrencyAmount); // amount _must_ be raw, i.e. in the native representation\n\n\n  function TokenAmount(token, amount) {\n    var _this;\n\n    _this = _CurrencyAmount.call(this, token, amount) || this;\n    _this.token = token;\n    return _this;\n  }\n\n  var _proto = TokenAmount.prototype;\n\n  _proto.add = function add(other) {\n    !this.token.equals(other.token) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw));\n  };\n\n  _proto.subtract = function subtract(other) {\n    !this.token.equals(other.token) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw));\n  };\n\n  return TokenAmount;\n}(CurrencyAmount);\n\nvar Price = /*#__PURE__*/function (_Fraction) {\n  _inheritsLoose(Price, _Fraction); // denominator and numerator _must_ be raw, i.e. in the native representation\n\n\n  function Price(baseCurrency, quoteCurrency, denominator, numerator) {\n    var _this;\n\n    _this = _Fraction.call(this, numerator, denominator) || this;\n    _this.baseCurrency = baseCurrency;\n    _this.quoteCurrency = quoteCurrency;\n    _this.scalar = new Fraction(JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)), JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals)));\n    return _this;\n  }\n\n  var _proto = Price.prototype;\n\n  _proto.invert = function invert() {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator);\n  };\n\n  _proto.multiply = function multiply(other) {\n    !currencyEquals(this.quoteCurrency, other.baseCurrency) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n\n    var fraction = _Fraction.prototype.multiply.call(this, other);\n\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator);\n  } // performs floor division on overflow\n  ;\n\n  _proto.quote = function quote(currencyAmount) {\n    !currencyEquals(currencyAmount.currency, this.baseCurrency) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, _Fraction.prototype.multiply.call(this, currencyAmount.raw).quotient);\n    }\n\n    return CurrencyAmount.ether(_Fraction.prototype.multiply.call(this, currencyAmount.raw).quotient);\n  };\n\n  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {\n    if (significantDigits === void 0) {\n      significantDigits = 6;\n    }\n\n    return this.adjusted.toSignificant(significantDigits, format, rounding);\n  };\n\n  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {\n    if (decimalPlaces === void 0) {\n      decimalPlaces = 4;\n    }\n\n    return this.adjusted.toFixed(decimalPlaces, format, rounding);\n  };\n\n  _createClass(Price, [{\n    key: \"raw\",\n    get: function get() {\n      return new Fraction(this.numerator, this.denominator);\n    }\n  }, {\n    key: \"adjusted\",\n    get: function get() {\n      return _Fraction.prototype.multiply.call(this, this.scalar);\n    }\n  }]);\n\n  return Price;\n}(Fraction); // `maxSize` by removing the last item\n\n\nfunction sortedInsert(items, add, maxSize, comparator) {\n  !(maxSize > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'MAX_SIZE_ZERO') : invariant(false) : void 0; // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n\n  !(items.length <= maxSize) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'ITEMS_SIZE') : invariant(false) : void 0; // short circuit first item add\n\n  if (items.length === 0) {\n    items.push(add);\n    return null;\n  } else {\n    var isFull = items.length === maxSize; // short circuit if full and the additional item does not come before the last item\n\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add;\n    }\n\n    var lo = 0,\n        hi = items.length;\n\n    while (lo < hi) {\n      var mid = lo + hi >>> 1;\n\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1;\n      } else {\n        hi = mid;\n      }\n    }\n\n    items.splice(lo, 0, add);\n    return isFull ? items.pop() : null;\n  }\n}\n\nexport { ChainId, Currency, CurrencyAmount, ETHER, Fraction, MaxUint256, Percent, Price, Rounding, Token, TokenAmount, TradeType, WETH9, currencyEquals, sortedInsert, validateAndParseAddress };","map":{"version":3,"sources":["../src/constants.ts","../src/utils/validateAndParseAddress.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/percent.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/utils/sortedInsert.ts"],"names":["ChainId","TradeType","Rounding","MaxUint256","JSBI","validateAndParseAddress","address","checksummedAddress","getAddress","Currency","decimals","ETHER","Token","equals","other","sortsBefore","currencyEquals","currencyA","currencyB","WETH9","Decimal","toFormat","Big","toSignificantRounding","toFixedRounding","Fraction","denominator","invert","add","otherParsed","subtract","lessThan","equalTo","greaterThan","multiply","divide","toSignificant","format","groupSeparator","rounding","ROUND_HALF_UP","Number","significantDigits","precision","quotient","toFixed","decimalPlaces","_100_PERCENT","Percent","CurrencyAmount","ether","parsedAmount","currency","ROUND_DOWN","toExact","TokenAmount","Price","baseCurrency","quoteCurrency","fraction","quote","currencyAmount","sortedInsert","items","maxSize","comparator","isFull","lo","hi","mid"],"mappings":"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","sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | string | number\n\nexport enum ChainId {\n  MAINNET = 1,\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  GÖRLI = 5,\n  KOVAN = 42\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n","import { getAddress } from '@ethersproject/address'\nimport invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\n\n// warns if addresses are not checksummed\nexport default function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n","import invariant from 'tiny-invariant'\n\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  /**\n   * The only instance of the base class `Currency`.\n   */\n  public static readonly ETHER: Currency = new Currency(18, 'ETH', 'Ether')\n\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    invariant(decimals < 255, 'DECIMALS')\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n}\n\nconst ETHER = Currency.ETHER\nexport { ETHER }\n","import invariant from 'tiny-invariant'\nimport validateAndParseAddress from '../utils/validateAndParseAddress'\nimport { ChainId } from '../constants'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId | number\n  public readonly address: string\n\n  public constructor(chainId: ChainId | number, address: string, decimals: number, symbol?: string, name?: string) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\nexport const WETH9: { [chainId in ChainId]: Token } = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    18,\n    'WETH9',\n    'Wrapped Ether'\n  ),\n  [ChainId.ROPSTEN]: new Token(\n    ChainId.ROPSTEN,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH9',\n    'Wrapped Ether'\n  ),\n  [ChainId.RINKEBY]: new Token(\n    ChainId.RINKEBY,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH9',\n    'Wrapped Ether'\n  ),\n  [ChainId.GÖRLI]: new Token(ChainId.GÖRLI, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH9', 'Wrapped Ether'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH9', 'Wrapped Ether')\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport default class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\n    this.numerator = JSBI.BigInt(numerator)\n    this.denominator = JSBI.BigInt(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(JSBI.BigInt(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(JSBI.BigInt(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(JSBI.BigInt(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(JSBI.BigInt(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(JSBI.BigInt(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(JSBI.BigInt(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(JSBI.BigInt(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import JSBI from 'jsbi'\nimport { Rounding } from '../../constants'\nimport Fraction from './fraction'\n\nconst _100_PERCENT = new Fraction(JSBI.BigInt(100))\n\nexport default class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import JSBI from 'jsbi'\nimport { currencyEquals } from '../token'\nimport { Currency, ETHER } from '../currency'\nimport invariant from 'tiny-invariant'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, MaxUint256 } from '../../constants'\nimport Fraction from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport default class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n  public static ether(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(ETHER, amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = JSBI.BigInt(amount)\n    invariant(JSBI.lessThanOrEqual(parsedAmount, MaxUint256), 'AMOUNT')\n\n    super(parsedAmount, JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import JSBI from 'jsbi'\nimport CurrencyAmount from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\n\nimport { BigintIsh } from '../../constants'\n\nexport default class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import JSBI from 'jsbi'\nimport { Token } from '../token'\nimport TokenAmount from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Currency } from '../currency'\nimport Fraction from './fraction'\nimport CurrencyAmount from './currencyAmount'\n\nexport default class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport default function sortedInsert<T>(\n  items: T[],\n  add: T,\n  maxSize: number,\n  comparator: (a: T, b: T) => number\n): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n"]},"metadata":{},"sourceType":"module"}