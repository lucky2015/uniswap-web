{"ast":null,"code":"import JSBI from 'jsbi';\nexport { default as JSBI } from 'jsbi';\nimport { TokenAmount, Token, Price, ETHER, WETH9, currencyEquals, TradeType, Fraction, CurrencyAmount, Percent, sortedInsert, validateAndParseAddress } from '@uniswap/sdk-core';\nimport invariant from 'tiny-invariant';\nimport { keccak256, pack } from '@ethersproject/solidity';\nimport { getCreate2Address } from '@ethersproject/address';\nvar FACTORY_ADDRESS = '0xE1D75405008cC3F14A4dEbc6BCc9b2353d2EBD83';\nvar INIT_CODE_HASH = '0x7cc6b5eead85c806623ca48013b52bf4819ebf8cc4da5c42634b67867d272ed6';\nvar MINIMUM_LIQUIDITY = /*#__PURE__*/JSBI.BigInt(1000); // exports for internal consumption\n\nvar ZERO = /*#__PURE__*/JSBI.BigInt(0);\nvar ONE = /*#__PURE__*/JSBI.BigInt(1);\nvar FIVE = /*#__PURE__*/JSBI.BigInt(5);\n\nvar _997 = /*#__PURE__*/JSBI.BigInt(997);\n\nvar _1000 = /*#__PURE__*/JSBI.BigInt(1000);\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if ('value' in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === 'undefined' || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === 'function') return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _construct(Parent, args, Class) {\n  if (_isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) _setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}\n\nfunction _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf('[native code]') !== -1;\n}\n\nfunction _wrapNativeSuper(Class) {\n  var _cache = typeof Map === 'function' ? new Map() : undefined;\n\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !_isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== 'function') {\n      throw new TypeError('Super expression must either be null or a function');\n    }\n\n    if (typeof _cache !== 'undefined') {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return _construct(Class, arguments, _getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return _setPrototypeOf(Wrapper, Class);\n  };\n\n  return _wrapNativeSuper(Class);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === 'string') return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === 'Object' && o.constructor) n = o.constructor.name;\n  if (n === 'Map' || n === 'Set') return Array.from(o);\n  if (n === 'Arguments' || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === 'undefined' || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === 'number') {\n      if (it) o = it;\n      var i = 0;\n      return function () {\n        if (i >= o.length) return {\n          done: true\n        };\n        return {\n          done: false,\n          value: o[i++]\n        };\n      };\n    }\n\n    throw new TypeError('Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.');\n  }\n\n  it = o[Symbol.iterator]();\n  return it.next.bind(it);\n} // see https://stackoverflow.com/a/41102306\n\n\nvar CAN_SET_PROTOTYPE = ('setPrototypeOf' in Object);\n/**\r\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\r\n * obtained by sending any amount of input.\r\n */\n\nvar InsufficientReservesError = /*#__PURE__*/function (_Error) {\n  _inheritsLoose(InsufficientReservesError, _Error);\n\n  function InsufficientReservesError() {\n    var _this;\n\n    _this = _Error.call(this) || this;\n    _this.isInsufficientReservesError = true;\n    _this.name = _this.constructor.name;\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(_assertThisInitialized(_this), (this instanceof InsufficientReservesError ? this.constructor : void 0).prototype);\n    return _this;\n  }\n\n  return InsufficientReservesError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n/**\r\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\r\n * than the price of a single unit of output after fees.\r\n */\n\n\nvar InsufficientInputAmountError = /*#__PURE__*/function (_Error2) {\n  _inheritsLoose(InsufficientInputAmountError, _Error2);\n\n  function InsufficientInputAmountError() {\n    var _this2;\n\n    _this2 = _Error2.call(this) || this;\n    _this2.isInsufficientInputAmountError = true;\n    _this2.name = _this2.constructor.name;\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(_assertThisInitialized(_this2), (this instanceof InsufficientInputAmountError ? this.constructor : void 0).prototype);\n    return _this2;\n  }\n\n  return InsufficientInputAmountError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nvar ZERO$1 = /*#__PURE__*/JSBI.BigInt(0);\nvar ONE$1 = /*#__PURE__*/JSBI.BigInt(1);\nvar TWO = /*#__PURE__*/JSBI.BigInt(2);\nvar THREE = /*#__PURE__*/JSBI.BigInt(3); // computes floor(babylonianSqrt(y)) using the babylonian method (not the fastest way)\n\nfunction babylonianSqrt(y) {\n  var z = ZERO$1;\n  var x;\n\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y;\n    x = JSBI.add(JSBI.divide(y, TWO), ONE$1);\n\n    while (JSBI.lessThan(x, z)) {\n      z = x;\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO);\n    }\n  } else if (JSBI.notEqual(y, ZERO$1)) {\n    z = ONE$1;\n  }\n\n  return z;\n}\n\nvar computePairAddress = function computePairAddress(_ref) {\n  var factoryAddress = _ref.factoryAddress,\n      tokenA = _ref.tokenA,\n      tokenB = _ref.tokenB;\n\n  var _ref2 = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA],\n      token0 = _ref2[0],\n      token1 = _ref2[1]; // does safety checks\n\n\n  return getCreate2Address(factoryAddress, keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]), INIT_CODE_HASH);\n};\n\nvar Pair = /*#__PURE__*/function () {\n  function Pair(tokenAmountA, tokenAmountB) {\n    var tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n    ? [tokenAmountA, tokenAmountB] : [tokenAmountB, tokenAmountA];\n    this.liquidityToken = new Token(tokenAmounts[0].token.chainId, Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token), 18, 'UNI-V2', 'Uniswap V2');\n    this.tokenAmounts = tokenAmounts;\n  }\n\n  Pair.getAddress = function getAddress(tokenA, tokenB) {\n    return computePairAddress({\n      factoryAddress: FACTORY_ADDRESS,\n      tokenA: tokenA,\n      tokenB: tokenB\n    });\n  };\n  /**\r\n   * Returns true if the token is either token0 or token1\r\n   * @param token to check\r\n   */\n\n\n  var _proto = Pair.prototype;\n\n  _proto.involvesToken = function involvesToken(token) {\n    return token.equals(this.token0) || token.equals(this.token1);\n  };\n  /**\r\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\r\n   */\n\n  /**\r\n   * Return the price of the given token in terms of the other token in the pair.\r\n   * @param token token to return price of\r\n   */\n\n\n  _proto.priceOf = function priceOf(token) {\n    !this.involvesToken(token) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n    return token.equals(this.token0) ? this.token0Price : this.token1Price;\n  };\n  /**\r\n   * Returns the chain ID of the tokens in the pair.\r\n   */\n\n\n  _proto.reserveOf = function reserveOf(token) {\n    !this.involvesToken(token) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1;\n  };\n\n  _proto.getOutputAmount = function getOutputAmount(inputAmount) {\n    !this.involvesToken(inputAmount.token) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError();\n    }\n\n    var inputReserve = this.reserveOf(inputAmount.token);\n    var outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0);\n    var inputAmountWithFee = JSBI.multiply(inputAmount.raw, _997);\n    var numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw);\n    var denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee);\n    var outputAmount = new TokenAmount(inputAmount.token.equals(this.token0) ? this.token1 : this.token0, JSBI.divide(numerator, denominator));\n\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError();\n    }\n\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))];\n  };\n\n  _proto.getInputAmount = function getInputAmount(outputAmount) {\n    !this.involvesToken(outputAmount.token) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO) || JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)) {\n      throw new InsufficientReservesError();\n    }\n\n    var outputReserve = this.reserveOf(outputAmount.token);\n    var inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0);\n    var numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000);\n    var denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _997);\n    var inputAmount = new TokenAmount(outputAmount.token.equals(this.token0) ? this.token1 : this.token0, JSBI.add(JSBI.divide(numerator, denominator), ONE));\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))];\n  };\n\n  _proto.getLiquidityMinted = function getLiquidityMinted(totalSupply, tokenAmountA, tokenAmountB) {\n    !totalSupply.token.equals(this.liquidityToken) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'LIQUIDITY') : invariant(false) : void 0;\n    var tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n    ? [tokenAmountA, tokenAmountB] : [tokenAmountB, tokenAmountA];\n    !(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n    var liquidity;\n\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(babylonianSqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY);\n    } else {\n      var amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw);\n      var amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw);\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1;\n    }\n\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError();\n    }\n\n    return new TokenAmount(this.liquidityToken, liquidity);\n  };\n\n  _proto.getLiquidityValue = function getLiquidityValue(token, totalSupply, liquidity, feeOn, kLast) {\n    if (feeOn === void 0) {\n      feeOn = false;\n    }\n\n    !this.involvesToken(token) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n    !totalSupply.token.equals(this.liquidityToken) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'TOTAL_SUPPLY') : invariant(false) : void 0;\n    !liquidity.token.equals(this.liquidityToken) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'LIQUIDITY') : invariant(false) : void 0;\n    !JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'LIQUIDITY') : invariant(false) : void 0;\n    var totalSupplyAdjusted;\n\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply;\n    } else {\n      !!!kLast ? process.env.NODE_ENV !== 'production' ? invariant(false, 'K_LAST') : invariant(false) : void 0;\n      var kLastParsed = JSBI.BigInt(kLast);\n\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        var rootK = babylonianSqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw));\n        var rootKLast = babylonianSqrt(kLastParsed);\n\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          var numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast));\n          var denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast);\n          var feeLiquidity = JSBI.divide(numerator, denominator);\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity));\n        } else {\n          totalSupplyAdjusted = totalSupply;\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply;\n      }\n    }\n\n    return new TokenAmount(token, JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw));\n  };\n\n  _createClass(Pair, [{\n    key: 'token0Price',\n    get: function get() {\n      return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw);\n    }\n    /**\r\n     * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\r\n     */\n\n  }, {\n    key: 'token1Price',\n    get: function get() {\n      return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw);\n    }\n  }, {\n    key: 'chainId',\n    get: function get() {\n      return this.token0.chainId;\n    }\n  }, {\n    key: 'token0',\n    get: function get() {\n      return this.tokenAmounts[0].token;\n    }\n  }, {\n    key: 'token1',\n    get: function get() {\n      return this.tokenAmounts[1].token;\n    }\n  }, {\n    key: 'reserve0',\n    get: function get() {\n      return this.tokenAmounts[0];\n    }\n  }, {\n    key: 'reserve1',\n    get: function get() {\n      return this.tokenAmounts[1];\n    }\n  }]);\n\n  return Pair;\n}();\n\nvar Route = /*#__PURE__*/function () {\n  function Route(pairs, input, output) {\n    !(pairs.length > 0) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'PAIRS') : invariant(false) : void 0;\n    var chainId = pairs[0].chainId;\n    !pairs.every(function (pair) {\n      return pair.chainId === chainId;\n    }) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'CHAIN_IDS') : invariant(false) : void 0;\n    var weth = WETH9[chainId];\n    !(input instanceof Token && pairs[0].involvesToken(input) || input === ETHER && weth && pairs[0].involvesToken(weth)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'INPUT') : invariant(false) : void 0;\n    !(typeof output === 'undefined' || output instanceof Token && pairs[pairs.length - 1].involvesToken(output) || output === ETHER && weth && pairs[pairs.length - 1].involvesToken(weth)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'OUTPUT') : invariant(false) : void 0;\n    var path = [input instanceof Token ? input : weth];\n\n    for (var _iterator = _createForOfIteratorHelperLoose(pairs.entries()), _step; !(_step = _iterator()).done;) {\n      var _step$value = _step.value,\n          i = _step$value[0],\n          pair = _step$value[1];\n      var currentInput = path[i];\n      !(currentInput.equals(pair.token0) || currentInput.equals(pair.token1)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'PATH') : invariant(false) : void 0;\n\n      var _output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0;\n\n      path.push(_output);\n    }\n\n    this.pairs = pairs;\n    this.path = path;\n    this.input = input;\n    this.output = output != null ? output : path[path.length - 1];\n  }\n\n  _createClass(Route, [{\n    key: 'midPrice',\n    get: function get() {\n      var prices = [];\n\n      for (var _iterator2 = _createForOfIteratorHelperLoose(this.pairs.entries()), _step2; !(_step2 = _iterator2()).done;) {\n        var _step2$value = _step2.value,\n            i = _step2$value[0],\n            pair = _step2$value[1];\n        prices.push(this.path[i].equals(pair.token0) ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw) : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw));\n      }\n\n      return prices.slice(1).reduce(function (accumulator, currentValue) {\n        return accumulator.multiply(currentValue);\n      }, prices[0]);\n    }\n  }, {\n    key: 'chainId',\n    get: function get() {\n      return this.pairs[0].chainId;\n    }\n  }]);\n\n  return Route;\n}();\n/**\r\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\r\n * @param midPrice mid price before the trade\r\n * @param inputAmount the input amount of the trade\r\n * @param outputAmount the output amount of the trade\r\n */\n\n\nfunction computePriceImpact(midPrice, inputAmount, outputAmount) {\n  var exactQuote = midPrice.raw.multiply(inputAmount.raw); // calculate slippage := (exactQuote - outputAmount) / exactQuote\n\n  var slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote);\n  return new Percent(slippage.numerator, slippage.denominator);\n} // comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\n\n\nfunction inputOutputComparator(a, b) {\n  // must have same input and output token for comparison\n  !currencyEquals(a.inputAmount.currency, b.inputAmount.currency) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'INPUT_CURRENCY') : invariant(false) : void 0;\n  !currencyEquals(a.outputAmount.currency, b.outputAmount.currency) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'OUTPUT_CURRENCY') : invariant(false) : void 0;\n\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0;\n    } // trade A requires less input than trade B, so A should come first\n\n\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1;\n    } else {\n      return 1;\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1;\n    } else {\n      return -1;\n    }\n  }\n} // extension of the input output comparator that also considers other dimensions of the trade in ranking them\n\n\nfunction tradeComparator(a, b) {\n  var ioComp = inputOutputComparator(a, b);\n\n  if (ioComp !== 0) {\n    return ioComp;\n  } // consider lowest slippage next, since these are less likely to fail\n\n\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1;\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1;\n  } // finally consider the number of hops since each hop costs gas\n\n\n  return a.route.path.length - b.route.path.length;\n}\n/**\r\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\r\n * In other words, if the currency is ETHER, returns the WETH9 token amount for the given chain. Otherwise, returns\r\n * the input currency amount.\r\n */\n\n\nfunction wrappedAmount(currencyAmount, chainId) {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount;\n  if (currencyAmount.currency === ETHER) return new TokenAmount(WETH9[chainId], currencyAmount.raw);\n  process.env.NODE_ENV !== 'production' ? invariant(false, 'CURRENCY') : invariant(false);\n}\n\nfunction wrappedCurrency(currency, chainId) {\n  if (currency instanceof Token) return currency;\n  if (currency === ETHER) return WETH9[chainId];\n  process.env.NODE_ENV !== 'production' ? invariant(false, 'CURRENCY') : invariant(false);\n}\n/**\r\n * Represents a trade executed against a list of pairs.\r\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\r\n */\n\n\nvar Trade = /*#__PURE__*/function () {\n  function Trade(route, amount, tradeType) {\n    var amounts = new Array(route.path.length);\n    var nextPairs = new Array(route.pairs.length);\n\n    if (tradeType === TradeType.EXACT_INPUT) {\n      !currencyEquals(amount.currency, route.input) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'INPUT') : invariant(false) : void 0;\n      amounts[0] = wrappedAmount(amount, route.chainId);\n\n      for (var i = 0; i < route.path.length - 1; i++) {\n        var pair = route.pairs[i];\n\n        var _pair$getOutputAmount = pair.getOutputAmount(amounts[i]),\n            outputAmount = _pair$getOutputAmount[0],\n            nextPair = _pair$getOutputAmount[1];\n\n        amounts[i + 1] = outputAmount;\n        nextPairs[i] = nextPair;\n      }\n    } else {\n      !currencyEquals(amount.currency, route.output) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'OUTPUT') : invariant(false) : void 0;\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId);\n\n      for (var _i = route.path.length - 1; _i > 0; _i--) {\n        var _pair = route.pairs[_i - 1];\n\n        var _pair$getInputAmount = _pair.getInputAmount(amounts[_i]),\n            inputAmount = _pair$getInputAmount[0],\n            _nextPair = _pair$getInputAmount[1];\n\n        amounts[_i - 1] = inputAmount;\n        nextPairs[_i - 1] = _nextPair;\n      }\n    }\n\n    this.route = route;\n    this.tradeType = tradeType;\n    this.inputAmount = tradeType === TradeType.EXACT_INPUT ? amount : route.input === ETHER ? CurrencyAmount.ether(amounts[0].raw) : amounts[0];\n    this.outputAmount = tradeType === TradeType.EXACT_OUTPUT ? amount : route.output === ETHER ? CurrencyAmount.ether(amounts[amounts.length - 1].raw) : amounts[amounts.length - 1];\n    this.executionPrice = new Price(this.inputAmount.currency, this.outputAmount.currency, this.inputAmount.raw, this.outputAmount.raw);\n    this.nextMidPrice = new Route(nextPairs, route.input).midPrice;\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount);\n  }\n  /**\r\n   * Constructs an exact in trade with the given amount in and route\r\n   * @param route route of the exact in trade\r\n   * @param amountIn the amount being passed in\r\n   */\n\n\n  Trade.exactIn = function exactIn(route, amountIn) {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT);\n  };\n  /**\r\n   * Constructs an exact out trade with the given amount out and route\r\n   * @param route route of the exact out trade\r\n   * @param amountOut the amount returned by the trade\r\n   */\n\n\n  Trade.exactOut = function exactOut(route, amountOut) {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT);\n  };\n  /**\r\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */\n\n\n  var _proto = Trade.prototype;\n\n  _proto.minimumAmountOut = function minimumAmountOut(slippageTolerance) {\n    !!slippageTolerance.lessThan(ZERO) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'SLIPPAGE_TOLERANCE') : invariant(false) : void 0;\n\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount;\n    } else {\n      var slippageAdjustedAmountOut = new Fraction(ONE).add(slippageTolerance).invert().multiply(this.outputAmount.raw).quotient;\n      return this.outputAmount instanceof TokenAmount ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut) : CurrencyAmount.ether(slippageAdjustedAmountOut);\n    }\n  };\n  /**\r\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */\n\n\n  _proto.maximumAmountIn = function maximumAmountIn(slippageTolerance) {\n    !!slippageTolerance.lessThan(ZERO) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'SLIPPAGE_TOLERANCE') : invariant(false) : void 0;\n\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount;\n    } else {\n      var slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient;\n      return this.inputAmount instanceof TokenAmount ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn) : CurrencyAmount.ether(slippageAdjustedAmountIn);\n    }\n  };\n  /**\r\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\r\n   * amount to an output token, making at most `maxHops` hops.\r\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param currencyAmountIn exact amount of input currency to spend\r\n   * @param currencyOut the desired currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */\n\n\n  Trade.bestTradeExactIn = function bestTradeExactIn(pairs, currencyAmountIn, currencyOut, _temp, // used in recursion.\n  currentPairs, originalAmountIn, bestTrades) {\n    var _ref = _temp === void 0 ? {} : _temp,\n        _ref$maxNumResults = _ref.maxNumResults,\n        maxNumResults = _ref$maxNumResults === void 0 ? 3 : _ref$maxNumResults,\n        _ref$maxHops = _ref.maxHops,\n        maxHops = _ref$maxHops === void 0 ? 3 : _ref$maxHops;\n\n    if (currentPairs === void 0) {\n      currentPairs = [];\n    }\n\n    if (originalAmountIn === void 0) {\n      originalAmountIn = currencyAmountIn;\n    }\n\n    if (bestTrades === void 0) {\n      bestTrades = [];\n    }\n\n    !(pairs.length > 0) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'PAIRS') : invariant(false) : void 0;\n    !(maxHops > 0) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'MAX_HOPS') : invariant(false) : void 0;\n    !(originalAmountIn === currencyAmountIn || currentPairs.length > 0) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'INVALID_RECURSION') : invariant(false) : void 0;\n    var chainId = currencyAmountIn instanceof TokenAmount ? currencyAmountIn.token.chainId : currencyOut instanceof Token ? currencyOut.chainId : undefined;\n    !(chainId !== undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'CHAIN_ID') : invariant(false) : void 0;\n    var amountIn = wrappedAmount(currencyAmountIn, chainId);\n    var tokenOut = wrappedCurrency(currencyOut, chainId);\n\n    for (var i = 0; i < pairs.length; i++) {\n      var pair = pairs[i]; // pair irrelevant\n\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue;\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue;\n      var amountOut = void 0;\n\n      try {\n        var _pair$getOutputAmount2 = pair.getOutputAmount(amountIn);\n\n        amountOut = _pair$getOutputAmount2[0];\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue;\n        }\n\n        throw error;\n      } // we have arrived at the output token, so this is the final trade of one of the paths\n\n\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(bestTrades, new Trade(new Route([].concat(currentPairs, [pair]), originalAmountIn.currency, currencyOut), originalAmountIn, TradeType.EXACT_INPUT), maxNumResults, tradeComparator);\n      } else if (maxHops > 1 && pairs.length > 1) {\n        var pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length)); // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n\n        Trade.bestTradeExactIn(pairsExcludingThisPair, amountOut, currencyOut, {\n          maxNumResults: maxNumResults,\n          maxHops: maxHops - 1\n        }, [].concat(currentPairs, [pair]), originalAmountIn, bestTrades);\n      }\n    }\n\n    return bestTrades;\n  };\n  /**\r\n   * similar to the above method but instead targets a fixed output amount\r\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\r\n   * to an output token amount, making at most `maxHops` hops\r\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param currencyIn the currency to spend\r\n   * @param currencyAmountOut the exact amount of currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */\n\n\n  Trade.bestTradeExactOut = function bestTradeExactOut(pairs, currencyIn, currencyAmountOut, _temp2, // used in recursion.\n  currentPairs, originalAmountOut, bestTrades) {\n    var _ref2 = _temp2 === void 0 ? {} : _temp2,\n        _ref2$maxNumResults = _ref2.maxNumResults,\n        maxNumResults = _ref2$maxNumResults === void 0 ? 3 : _ref2$maxNumResults,\n        _ref2$maxHops = _ref2.maxHops,\n        maxHops = _ref2$maxHops === void 0 ? 3 : _ref2$maxHops;\n\n    if (currentPairs === void 0) {\n      currentPairs = [];\n    }\n\n    if (originalAmountOut === void 0) {\n      originalAmountOut = currencyAmountOut;\n    }\n\n    if (bestTrades === void 0) {\n      bestTrades = [];\n    }\n\n    !(pairs.length > 0) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'PAIRS') : invariant(false) : void 0;\n    !(maxHops > 0) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'MAX_HOPS') : invariant(false) : void 0;\n    !(originalAmountOut === currencyAmountOut || currentPairs.length > 0) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'INVALID_RECURSION') : invariant(false) : void 0;\n    var chainId = currencyAmountOut instanceof TokenAmount ? currencyAmountOut.token.chainId : currencyIn instanceof Token ? currencyIn.chainId : undefined;\n    !(chainId !== undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'CHAIN_ID') : invariant(false) : void 0;\n    var amountOut = wrappedAmount(currencyAmountOut, chainId);\n    var tokenIn = wrappedCurrency(currencyIn, chainId);\n\n    for (var i = 0; i < pairs.length; i++) {\n      var pair = pairs[i]; // pair irrelevant\n\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue;\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue;\n      var amountIn = void 0;\n\n      try {\n        var _pair$getInputAmount2 = pair.getInputAmount(amountOut);\n\n        amountIn = _pair$getInputAmount2[0];\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue;\n        }\n\n        throw error;\n      } // we have arrived at the input token, so this is the first trade of one of the paths\n\n\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(bestTrades, new Trade(new Route([pair].concat(currentPairs), currencyIn, originalAmountOut.currency), originalAmountOut, TradeType.EXACT_OUTPUT), maxNumResults, tradeComparator);\n      } else if (maxHops > 1 && pairs.length > 1) {\n        var pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length)); // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n\n        Trade.bestTradeExactOut(pairsExcludingThisPair, currencyIn, amountIn, {\n          maxNumResults: maxNumResults,\n          maxHops: maxHops - 1\n        }, [pair].concat(currentPairs), originalAmountOut, bestTrades);\n      }\n    }\n\n    return bestTrades;\n  };\n\n  return Trade;\n}();\n\nfunction toHex(currencyAmount) {\n  return '0x' + currencyAmount.raw.toString(16);\n}\n\nvar ZERO_HEX = '0x0';\n/**\r\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\r\n */\n\nvar Router = /*#__PURE__*/function () {\n  /**\r\n   * Cannot be constructed.\r\n   */\n  function Router() {}\n  /**\r\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\r\n   * @param trade to produce call parameters for\r\n   * @param options options for the call parameters\r\n   */\n\n\n  Router.swapCallParameters = function swapCallParameters(trade, options) {\n    var etherIn = trade.inputAmount.currency === ETHER;\n    var etherOut = trade.outputAmount.currency === ETHER; // the router does not support both ether in and out\n\n    !!(etherIn && etherOut) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ETHER_IN_OUT') : invariant(false) : void 0;\n    !(!('ttl' in options) || options.ttl > 0) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'TTL') : invariant(false) : void 0;\n    var to = validateAndParseAddress(options.recipient);\n    var amountIn = toHex(trade.maximumAmountIn(options.allowedSlippage));\n    var amountOut = toHex(trade.minimumAmountOut(options.allowedSlippage));\n    var path = trade.route.path.map(function (token) {\n      return token.address;\n    });\n    var deadline = 'ttl' in options ? '0x' + (Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16) : '0x' + options.deadline.toString(16);\n    var useFeeOnTransfer = Boolean(options.feeOnTransfer);\n    var methodName;\n    var args;\n    var value;\n\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'; // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n\n          args = [amountOut, path, to, deadline];\n          value = amountIn;\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'; // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n\n          args = [amountIn, amountOut, path, to, deadline];\n          value = ZERO_HEX;\n        } else {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens' : 'swapExactTokensForTokens'; // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n\n          args = [amountIn, amountOut, path, to, deadline];\n          value = ZERO_HEX;\n        }\n\n        break;\n\n      case TradeType.EXACT_OUTPUT:\n        !!useFeeOnTransfer ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EXACT_OUT_FOT') : invariant(false) : void 0;\n\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'; // (uint amountOut, address[] calldata path, address to, uint deadline)\n\n          args = [amountOut, path, to, deadline];\n          value = amountIn;\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'; // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n\n          args = [amountOut, amountIn, path, to, deadline];\n          value = ZERO_HEX;\n        } else {\n          methodName = 'swapTokensForExactTokens'; // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n\n          args = [amountOut, amountIn, path, to, deadline];\n          value = ZERO_HEX;\n        }\n\n        break;\n    }\n\n    return {\n      methodName: methodName,\n      args: args,\n      value: value\n    };\n  };\n\n  return Router;\n}();\n\nexport { FACTORY_ADDRESS, INIT_CODE_HASH, InsufficientInputAmountError, InsufficientReservesError, MINIMUM_LIQUIDITY, Pair, Route, Router, Trade, computePairAddress, inputOutputComparator, tradeComparator };","map":{"version":3,"sources":["../src/constants.ts","../src/errors.ts","../src/utils/babylonianSqrt.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/trade.ts","../src/router.ts"],"names":["FACTORY_ADDRESS","INIT_CODE_HASH","MINIMUM_LIQUIDITY","CAN_SET_PROTOTYPE","name","ZERO","TWO","babylonianSqrt","lessThan","x","JSBI","z","ONE","computePairAddress","tokenA","tokenB","token0","getCreate2Address","factoryAddress","tokenAmountA","tokenAmounts","involvesToken","token1","priceOf","token","equals","token1Price","inputAmount","InsufficientInputAmountError","outputReserve","inputReserve","numerator","denominator","outputAmount","liquidity","subtract","multiply","lessThanOrEqual","greaterThan","getLiquidityValue","feeOn","totalSupply","liquidityToken","totalSupplyAdjusted","kLast","rootKLast","TokenAmount","prices","i","pair","pairs","length","chainId","weth","WETH9","input","path","currentInput","output","computePriceImpact","exactQuote","midPrice","currencyEquals","a","priceImpact","wrappedAmount","currencyAmount","currency","Trade","exactIn","amount","amounts","Array","nextPairs","tradeType","TradeType","EXACT_INPUT","EXACT_OUTPUT","route","CurrencyAmount","executionPrice","Price","slippageAdjustedAmountOut","maximumAmountIn","slippageTolerance","slippageAdjustedAmountIn","maxNumResults","maxHops","currentPairs","originalAmountIn","bestTrades","currencyAmountIn","amountOut","sortedInsert","bestTradeExactIn","originalAmountOut","currencyAmountOut","amountIn","isInsufficientReservesError","pairsExcludingThisPair","bestTradeExactOut","ZERO_HEX","methodName","trade","value","etherOut","args","useFeeOnTransfer"],"mappings":"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","sourcesContent":["import JSBI from 'jsbi'\n\nexport const FACTORY_ADDRESS = '0xE1D75405008cC3F14A4dEbc6BCc9b2353d2EBD83'\n\nexport const INIT_CODE_HASH = '0x7cc6b5eead85c806623ca48013b52bf4819ebf8cc4da5c42634b67867d272ed6'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const FIVE = JSBI.BigInt(5)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import JSBI from 'jsbi'\n\nconst ZERO = JSBI.BigInt(0)\nconst ONE = JSBI.BigInt(1)\nconst TWO = JSBI.BigInt(2)\nconst THREE = JSBI.BigInt(3)\n\n// computes floor(babylonianSqrt(y)) using the babylonian method (not the fastest way)\nexport default function babylonianSqrt(y: JSBI): JSBI {\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n","import { BigintIsh, ChainId, Price, Token, TokenAmount } from '@uniswap/sdk-core'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\nimport babylonianSqrt from '../utils/babylonianSqrt'\n\nimport { FACTORY_ADDRESS, INIT_CODE_HASH, MINIMUM_LIQUIDITY, FIVE, _997, _1000, ONE, ZERO } from '../constants'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\n\nexport const computePairAddress = ({\n  factoryAddress,\n  tokenA,\n  tokenB\n}: {\n  factoryAddress: string\n  tokenA: Token\n  tokenB: Token\n}): string => {\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n  return getCreate2Address(\n    factoryAddress,\n    keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]),\n    INIT_CODE_HASH\n  )\n}\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    return computePairAddress({ factoryAddress: FACTORY_ADDRESS, tokenA, tokenB })\n  }\n\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId | number {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _997)\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(\n        babylonianSqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)),\n        MINIMUM_LIQUIDITY\n      )\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = JSBI.BigInt(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = babylonianSqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = babylonianSqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { ChainId, Currency, ETHER, Price, Token, WETH9 } from '@uniswap/sdk-core'\nimport invariant from 'tiny-invariant'\n\nimport { Pair } from './pair'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n\n  public get midPrice(): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of this.pairs.entries()) {\n      prices.push(\n        this.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    const chainId: ChainId | number = pairs[0].chainId\n    invariant(\n      pairs.every(pair => pair.chainId === chainId),\n      'CHAIN_IDS'\n    )\n\n    const weth: Token | undefined = WETH9[chainId as ChainId]\n\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n        (input === ETHER && weth && pairs[0].involvesToken(weth)),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n        (output === ETHER && weth && pairs[pairs.length - 1].involvesToken(weth)),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : weth]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId | number {\n    return this.pairs[0].chainId\n  }\n}\n","import {\n  ChainId,\n  Currency,\n  CurrencyAmount,\n  currencyEquals,\n  ETHER,\n  Fraction,\n  Percent,\n  Price,\n  sortedInsert,\n  Token,\n  TokenAmount,\n  TradeType,\n  WETH9\n} from '@uniswap/sdk-core'\nimport { ONE, ZERO } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Pair } from './pair'\nimport { Route } from './route'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH9 token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === ETHER) return new TokenAmount(WETH9[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === ETHER) return WETH9[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === ETHER\n        ? CurrencyAmount.ether(amounts[0].raw)\n        : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === ETHER\n        ? CurrencyAmount.ether(amounts[amounts.length - 1].raw)\n        : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = new Route(nextPairs, route.input).midPrice\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.ether(slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.ether(slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n        ? currencyIn.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { CurrencyAmount, ETHER, Percent, TradeType, validateAndParseAddress } from '@uniswap/sdk-core'\nimport { Trade } from 'entities'\nimport invariant from 'tiny-invariant'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions | TradeOptionsDeadline): SwapParameters {\n    const etherIn = trade.inputAmount.currency === ETHER\n    const etherOut = trade.outputAmount.currency === ETHER\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}