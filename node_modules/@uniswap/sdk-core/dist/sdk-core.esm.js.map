{"version":3,"file":"sdk-core.esm.js","sources":["../src/constants.ts","../src/utils/validateAndParseAddress.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/percent.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/utils/sortedInsert.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | string | number\n\nexport enum ChainId {\n  MAINNET = 1,\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  GÖRLI = 5,\n  KOVAN = 42\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n","import { getAddress } from '@ethersproject/address'\nimport invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\n\n// warns if addresses are not checksummed\nexport default function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n","import invariant from 'tiny-invariant'\n\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  /**\n   * The only instance of the base class `Currency`.\n   */\n  public static readonly ETHER: Currency = new Currency(18, 'ETH', 'Ether')\n\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    invariant(decimals < 255, 'DECIMALS')\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n}\n\nconst ETHER = Currency.ETHER\nexport { ETHER }\n","import invariant from 'tiny-invariant'\nimport validateAndParseAddress from '../utils/validateAndParseAddress'\nimport { ChainId } from '../constants'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId | number\n  public readonly address: string\n\n  public constructor(chainId: ChainId | number, address: string, decimals: number, symbol?: string, name?: string) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\nexport const WETH9: { [chainId in ChainId]: Token } = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    18,\n    'WETH9',\n    'Wrapped Ether'\n  ),\n  [ChainId.ROPSTEN]: new Token(\n    ChainId.ROPSTEN,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH9',\n    'Wrapped Ether'\n  ),\n  [ChainId.RINKEBY]: new Token(\n    ChainId.RINKEBY,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH9',\n    'Wrapped Ether'\n  ),\n  [ChainId.GÖRLI]: new Token(ChainId.GÖRLI, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH9', 'Wrapped Ether'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH9', 'Wrapped Ether')\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport default class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\n    this.numerator = JSBI.BigInt(numerator)\n    this.denominator = JSBI.BigInt(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(JSBI.BigInt(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(JSBI.BigInt(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(JSBI.BigInt(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(JSBI.BigInt(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(JSBI.BigInt(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(JSBI.BigInt(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(JSBI.BigInt(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import JSBI from 'jsbi'\nimport { Rounding } from '../../constants'\nimport Fraction from './fraction'\n\nconst _100_PERCENT = new Fraction(JSBI.BigInt(100))\n\nexport default class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import JSBI from 'jsbi'\nimport { currencyEquals } from '../token'\nimport { Currency, ETHER } from '../currency'\nimport invariant from 'tiny-invariant'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, MaxUint256 } from '../../constants'\nimport Fraction from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport default class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n  public static ether(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(ETHER, amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = JSBI.BigInt(amount)\n    invariant(JSBI.lessThanOrEqual(parsedAmount, MaxUint256), 'AMOUNT')\n\n    super(parsedAmount, JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import JSBI from 'jsbi'\nimport CurrencyAmount from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\n\nimport { BigintIsh } from '../../constants'\n\nexport default class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import JSBI from 'jsbi'\nimport { Token } from '../token'\nimport TokenAmount from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Currency } from '../currency'\nimport Fraction from './fraction'\nimport CurrencyAmount from './currencyAmount'\n\nexport default class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport default function sortedInsert<T>(\n  items: T[],\n  add: T,\n  maxSize: number,\n  comparator: (a: T, b: T) => number\n): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n"],"names":["ChainId","TradeType","Rounding","MaxUint256","JSBI","BigInt","validateAndParseAddress","address","checksummedAddress","getAddress","warning","error","invariant","Currency","decimals","symbol","name","ETHER","Token","chainId","equals","other","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","WETH9","MAINNET","ROPSTEN","RINKEBY","GÖRLI","KOVAN","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","add","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","_100_PERCENT","Percent","CurrencyAmount","currency","amount","parsedAmount","lessThanOrEqual","exponentiate","ether","raw","toExact","TokenAmount","token","Price","baseCurrency","quoteCurrency","scalar","fraction","quote","currencyAmount","adjusted","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop"],"mappings":"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"}