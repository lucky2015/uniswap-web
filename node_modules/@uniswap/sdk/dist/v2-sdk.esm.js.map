{"version":3,"file":"v2-sdk.esm.js","sources":["../src/constants.ts","../src/errors.ts","../src/utils/babylonianSqrt.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/trade.ts","../src/router.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\nexport const FACTORY_ADDRESS = '0xE1D75405008cC3F14A4dEbc6BCc9b2353d2EBD83'\n\nexport const INIT_CODE_HASH = '0x7cc6b5eead85c806623ca48013b52bf4819ebf8cc4da5c42634b67867d272ed6'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const FIVE = JSBI.BigInt(5)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import JSBI from 'jsbi'\n\nconst ZERO = JSBI.BigInt(0)\nconst ONE = JSBI.BigInt(1)\nconst TWO = JSBI.BigInt(2)\nconst THREE = JSBI.BigInt(3)\n\n// computes floor(babylonianSqrt(y)) using the babylonian method (not the fastest way)\nexport default function babylonianSqrt(y: JSBI): JSBI {\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n","import { BigintIsh, ChainId, Price, Token, TokenAmount } from '@uniswap/sdk-core'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\nimport babylonianSqrt from '../utils/babylonianSqrt'\n\nimport { FACTORY_ADDRESS, INIT_CODE_HASH, MINIMUM_LIQUIDITY, FIVE, _997, _1000, ONE, ZERO } from '../constants'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\n\nexport const computePairAddress = ({\n  factoryAddress,\n  tokenA,\n  tokenB\n}: {\n  factoryAddress: string\n  tokenA: Token\n  tokenB: Token\n}): string => {\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n  return getCreate2Address(\n    factoryAddress,\n    keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]),\n    INIT_CODE_HASH\n  )\n}\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    return computePairAddress({ factoryAddress: FACTORY_ADDRESS, tokenA, tokenB })\n  }\n\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId | number {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _997)\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(\n        babylonianSqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)),\n        MINIMUM_LIQUIDITY\n      )\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = JSBI.BigInt(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = babylonianSqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = babylonianSqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { ChainId, Currency, ETHER, Price, Token, WETH9 } from '@uniswap/sdk-core'\nimport invariant from 'tiny-invariant'\n\nimport { Pair } from './pair'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n\n  public get midPrice(): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of this.pairs.entries()) {\n      prices.push(\n        this.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    const chainId: ChainId | number = pairs[0].chainId\n    invariant(\n      pairs.every(pair => pair.chainId === chainId),\n      'CHAIN_IDS'\n    )\n\n    const weth: Token | undefined = WETH9[chainId as ChainId]\n\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n        (input === ETHER && weth && pairs[0].involvesToken(weth)),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n        (output === ETHER && weth && pairs[pairs.length - 1].involvesToken(weth)),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : weth]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId | number {\n    return this.pairs[0].chainId\n  }\n}\n","import {\n  ChainId,\n  Currency,\n  CurrencyAmount,\n  currencyEquals,\n  ETHER,\n  Fraction,\n  Percent,\n  Price,\n  sortedInsert,\n  Token,\n  TokenAmount,\n  TradeType,\n  WETH9\n} from '@uniswap/sdk-core'\nimport { ONE, ZERO } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Pair } from './pair'\nimport { Route } from './route'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH9 token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === ETHER) return new TokenAmount(WETH9[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === ETHER) return WETH9[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === ETHER\n        ? CurrencyAmount.ether(amounts[0].raw)\n        : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === ETHER\n        ? CurrencyAmount.ether(amounts[amounts.length - 1].raw)\n        : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = new Route(nextPairs, route.input).midPrice\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.ether(slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.ether(slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n        ? currencyIn.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { CurrencyAmount, ETHER, Percent, TradeType, validateAndParseAddress } from '@uniswap/sdk-core'\nimport { Trade } from 'entities'\nimport invariant from 'tiny-invariant'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions | TradeOptionsDeadline): SwapParameters {\n    const etherIn = trade.inputAmount.currency === ETHER\n    const etherOut = trade.outputAmount.currency === ETHER\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n"],"names":["FACTORY_ADDRESS","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","FIVE","_997","_1000","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","TWO","THREE","babylonianSqrt","y","z","x","greaterThan","add","divide","lessThan","notEqual","computePairAddress","factoryAddress","tokenA","tokenB","sortsBefore","token0","token1","getCreate2Address","keccak256","pack","address","Pair","tokenAmountA","tokenAmountB","tokenAmounts","token","liquidityToken","Token","chainId","getAddress","involvesToken","equals","priceOf","invariant","token0Price","token1Price","reserveOf","reserve0","reserve1","getOutputAmount","inputAmount","equal","raw","inputReserve","outputReserve","inputAmountWithFee","multiply","numerator","denominator","outputAmount","TokenAmount","subtract","getInputAmount","greaterThanOrEqual","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","lessThanOrEqual","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Price","Route","pairs","input","output","length","every","pair","weth","WETH9","ETHER","path","entries","i","currentInput","push","prices","currency","slice","reduce","accumulator","currentValue","computePriceImpact","midPrice","exactQuote","slippage","Percent","inputOutputComparator","a","b","currencyEquals","equalTo","tradeComparator","ioComp","priceImpact","route","wrappedAmount","currencyAmount","wrappedCurrency","Trade","amount","tradeType","amounts","Array","nextPairs","TradeType","EXACT_INPUT","nextPair","CurrencyAmount","ether","EXACT_OUTPUT","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","Fraction","invert","quotient","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","undefined","tokenOut","error","isInsufficientInputAmountError","sortedInsert","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","isInsufficientReservesError","toHex","toString","ZERO_HEX","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","to","validateAndParseAddress","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName","args","value"],"mappings":"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"}